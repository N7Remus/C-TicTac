
//#include "pch.h"
#include <iostream>
#include <windows.h>
#include <conio.h>
#include <tuple>
#include <string>


/*Billentyű definiciók*/
#define KEY_UP 72
#define KEY_DOWN 80
#define KEY_LEFT 75
#define KEY_RIGHT 77
#define KEY_ENTER 13
#define KEY_ESC 27
#define KEY_J 106
#define KEY_M 109
#define KEY_P 112
#define KEY_U 117

/*Játékos változó*/
const char Players[] = { 'O','X' };

/*Színkezelő változó*/
const HANDLE  hConsole = GetStdHandle(STD_OUTPUT_HANDLE);


using namespace std;
int cursor_X = 0;
int cursor_Y = 0;

int cursor_x = 0;
int cursor_y = 0;

char**** initMainBoard(int row, int col, bool make_it_empty = false) {
	char default_v;
	if (make_it_empty) {
		default_v = '-';
	}
	else {
		default_v = '.';
	}
	char**** newCharArray = new char*** [row];
	for (int i = 0; i < row; i++) {
		newCharArray[i] = new char** [col];
		for (int j = 0; j < col; j++) {
			newCharArray[i][j] = new char* [2];
			for (int k = 0; k < 2; k++)
			{
				newCharArray[i][j][k] = new char[2];
				for (int l = 0; l < 2; l++)
				{
					newCharArray[i][j][k][l] = default_v;
				}

			}
		}
	}
	return newCharArray;
}
char**** cloneArrayValues(int row, int col, int row_extra, int col_extra, char**** original_board) {


	/* Lemásolja a orignal array értékeit */
	char**** newCharArray = initMainBoard(row, col, true);
	if (row_extra < 0) {
		row--;
		row_extra = 0;
	}
	else if (row_extra == 0)
		row_extra = 0;
	else
		row--;

	if (col_extra < 0) {
		col--;
		col_extra = 0;
	}
	else if (col_extra == 0)
		col_extra = 0;
	else
		col--;
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			newCharArray[i + row_extra][j + col_extra] = original_board[i][j];
		}
		delete[] original_board[i];
	}
	delete[] original_board;
	return newCharArray;
}

int main(int argc, char** argv) {

	int player = 0;
	int row = 1;
	int col = 1;
	int vision = 3;
	int limit_for_win = 5;
	int limit = 0;
	bool win = false;
	char** mozgatando = new char* [2];

	int lehejezett_ernyo = 0; //max 36 - játék vége
	int jatekoslapka = 1; //max 16

	int akcio = 1;
	int mode = 0;

	int mozgatas_elotti_X;
	int mozgatas_elotti_Y;
	bool mozgathathat = false;
	bool jelolhet = true;
	bool passzolhat = false;
	bool ujjat_lehejezhet = false;
	int oldalszomszed_szam = 0;
	int elozo_korben_jelolt_Y = NULL;
	int elozo_korben_jelolt_X = NULL;

	char**** main_array = initMainBoard(row, col);
	int i;
	int j;
	int k;
	int l;

	while (!win)
	{
		/*################################kijezlő################################################*/
		system("cls");
		SetConsoleTextAttribute(hConsole, 7);

		if (!jelolhet && !mozgathathat && !ujjat_lehejezhet && !passzolhat) {
			if (player == 0)
				player = 1;
			else
				player = 0;
			jelolhet = true;
			passzolhat = false;
			ujjat_lehejezhet = true;
			if (jatekoslapka > 1)
				mozgathathat = true;
		}
		cout << endl << "Cursor X:" << cursor_X << " - " << "Cursor Y:" << cursor_Y << endl;
		cout << endl << "Cursor x:" << cursor_x << " - " << "Cursor y:" << cursor_y << endl;
		cout << endl << "row : " << row << ":" << " col : " << col << " jatekos:" << Players[player] << endl;


		/*sor*/
		for (i = cursor_Y + vision; i > cursor_Y - vision - 1; i--) {
			/*subsor*/

			for (k = 1; k > -1; k--)
			{
				/*oszlop*/
				for (j = cursor_X - vision; j < cursor_X + vision + 1; j++) {

					/*suboszlop*/
					for (l = 0; l < 2; l++)
					{
						if (i < 0 || j < 0 || row <= i || col <= j) {
							if (mode == 2 && i == cursor_Y && j == cursor_X)
								SetConsoleTextAttribute(hConsole, 14);
							else if (mode == 3 && i == cursor_Y && j == cursor_X)
								SetConsoleTextAttribute(hConsole, 23);
							else if (mode == 4 && i == cursor_Y && j == cursor_X)
								SetConsoleTextAttribute(hConsole, 41);
							else
								SetConsoleTextAttribute(hConsole, 8);

							cout << ":";
						}
						else {
							if (i == cursor_Y && j == cursor_X && k == cursor_y && l == cursor_x)
							{

								if (main_array[i][j][k][j] == Players[0] || main_array[i][j][k][j] == Players[1])
									SetConsoleTextAttribute(hConsole, BACKGROUND_RED);
								else
									SetConsoleTextAttribute(hConsole, BACKGROUND_GREEN);
							}
							else
								SetConsoleTextAttribute(hConsole, 7);
							if (mode == 2 && i == cursor_Y && j == cursor_X)
								SetConsoleTextAttribute(hConsole, 14);
							else if (mode == 3 && i == cursor_Y && j == cursor_X)
								SetConsoleTextAttribute(hConsole, 23);
							else if (mode == 4 && i == cursor_Y && j == cursor_X)
								SetConsoleTextAttribute(hConsole, 41);

							cout << main_array[i][j][k][l];

						}
					}
					SetConsoleTextAttribute(hConsole, 9);
					if (j != cursor_X + vision)
						cout << "|";
					SetConsoleTextAttribute(hConsole, 7);


				}
				if (k == 1)
					cout << "\n";

			}
			cout << "\n";
			SetConsoleTextAttribute(hConsole, 9);

			for (int v = 0; v < 3 + (vision * 2) * 3; v++)
			{
				if (v != 3 + (vision * 2) * 3 - 1)
					if ((v + 1) % 3 == 0)
						cout << "+";
					else
						cout << "-";
			}
			SetConsoleTextAttribute(hConsole, 7);

			cout << "\n";
		}


		/*################################mód_kiválasztás################################################*/

		/* Jelölsz vagy mozgatsz?
			- az elején nem mozgathat

		*/
		if (mode == 0) {
			if (jelolhet && lehejezett_ernyo < jatekoslapka * 4)
				SetConsoleTextAttribute(hConsole, 7);
			else
				SetConsoleTextAttribute(hConsole, 8);
			cout << "Jeloleshez - J" << endl;

			if (mozgathathat)
				SetConsoleTextAttribute(hConsole, 7);
			else
				SetConsoleTextAttribute(hConsole, 8);
			cout << "Mozgatashoz - M" << endl;

			if (passzolhat)
				SetConsoleTextAttribute(hConsole, 7);
			else
				SetConsoleTextAttribute(hConsole, 8);
			cout << "Passzolashoz - P" << endl;

			if (ujjat_lehejezhet && jatekoslapka < 16)
				SetConsoleTextAttribute(hConsole, 7);
			else
				SetConsoleTextAttribute(hConsole, 8);
			cout << "Uj lerakashoz - U" << endl;

			switch (_getch()) {

			case KEY_J:
				if (jelolhet && lehejezett_ernyo < jatekoslapka * 4) {
					mode = 1;
					jelolhet = false;
					ujjat_lehejezhet = false;
					mozgathathat = false;
					lehejezett_ernyo++;
				}
				else
				{
					cout << "Nem Jelolhet!" << "Folytatashoz uss le egy billentyut..." << endl;
					cin.ignore();
				}
				continue;

				break;

			case KEY_U:
				if (ujjat_lehejezhet) {
					mode = 2;
					ujjat_lehejezhet = false;
					jatekoslapka++;
					mozgathathat = false;
				}
				else
				{
					cout << "Nem helyezhet le ujjat!" << "Folytatashoz uss le egy billentyut..." << endl;
					cin.ignore();
				}
				continue;
				break;

			case KEY_M:
				if (mozgathathat) {
					mode = 3;
					if (akcio == 2) {
						akcio = 1;
						mozgathathat = false;
						passzolhat = false;
					}
					else {
						passzolhat = true;
					}
					
					akcio++;
					jelolhet = false;
					ujjat_lehejezhet = false;
				}
				else
				{
					cout << "Nem mozgathat!" << "Folytatashoz uss le egy billentyut..." << endl;
					cin.ignore();
				}
				continue;


				break;
			case KEY_P:
				if (passzolhat) {
					if (player == 0)
						player = 1;
					else
						player = 0;
					jelolhet = true;
					ujjat_lehejezhet = true;
					if (jatekoslapka > 1)
						mozgathathat = true;
					passzolhat = false;
				}
				else
				{
					cout << "Nem Passzolhat!" << "Folytatashoz uss le egy billentyut..." << endl;
					cin.ignore();
				}
				continue;
			}
		}
		/*################################modóok###############################################################*/
		else {
			//mode 1 jelölés->mode0
			if (mode == 1) {
				cout << "Jeloleshez - Enter";
				switch (_getch()) {
				case KEY_UP:
					cursor_y++;
					if (cursor_y > 1) {
						cursor_Y++;
						if (cursor_Y > row - 1) {
							cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
							cin.ignore();
							cursor_Y--;
							cursor_y--;
							continue;
						}
						else {
							cursor_y -= 2;
						}
					}
					break;
				case KEY_DOWN:
					cursor_y--;
					if (cursor_y < 0) {
						cursor_Y--;
						if (cursor_Y < 0) {
							cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
							cin.ignore();
							cursor_Y++;
							cursor_y++;
							continue;
						}
						else {
							cursor_y += 2;
						}
					}
					break;
				case KEY_LEFT:
					cursor_x--;
					if (cursor_x < 0) {
						cursor_X--;
						if (cursor_X < 0) {
							cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
							cin.ignore();
							cursor_X++;
							cursor_x++;
							continue;
						}
						else {
							cursor_x += 2;
						}
					}
					break;
				case KEY_RIGHT:
					cursor_x++;
					if (cursor_x > 1) {
						cursor_X++;
						if (cursor_X > col - 1) {
							cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
							cin.ignore();
							cursor_X--;
							cursor_x--;
							continue;
						}
						else {
							cursor_x -= 2;
						}
					}
					break;
				case KEY_ENTER:
					if (main_array[cursor_Y][cursor_X][cursor_y][cursor_x] != '.') {
						cout << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						continue;
					}
					else {
						main_array[cursor_Y][cursor_X][cursor_y][cursor_x] = Players[player];
						//Ellenörzés ##########################################################
						/*Ellenörzés a sorban*/
						limit = 0;
						/*sor*/
						i = cursor_Y;
						/*subsor*/
						k = cursor_y;
						/*oszlop*/
						for (j = cursor_X - limit_for_win; j < cursor_X + limit_for_win + 1; j++) {
							/*suboszlop*/
							for (l = 0; l < 2; l++)
							{
								if (i < 0 || j < 0 || row <= i || col <= j) {
									/*érvénytelen lapkák*/
								}
								else {
									if (main_array[i][j][k][l] == Players[player])
									{
										limit++;
										if (limit == limit_for_win)
											win = true;
									}
									else {
										limit = 0;
									}

								}
							}
						}
						/*Ellenörzés oszlopban */
						limit = 0;
						/*oszlop*/
						j = cursor_X;
						/*suboszlop*/
						l = cursor_x;
						/*sor*/
						for (i = cursor_Y - limit_for_win; i < cursor_Y + limit_for_win + 1; i++) {
							/*subsor*/
							for (k = 0; k < 2; k++)
							{
								if (i < 0 || j < 0 || row <= i || col <= j) {
									/*érvénytelen lapkák*/
								}
								else {
									if (main_array[i][j][k][l] == Players[player])
									{
										limit++;
										if (limit == limit_for_win)
											win = true;
									}
									else {
										limit = 0;
									}

								}
							}
						}
						/* Ellenörzés átlóban */
						j = cursor_X - limit_for_win;
						limit = 0;
						for (i = cursor_Y + limit_for_win; i > cursor_Y - limit_for_win - 1; i--) {
							if (i < 0 || j < 0 || row <= i || col <= j) {
								limit = 0;
							}
							else {
								if (main_array[i][j][1][0] != Players[player])
									limit = 0;
								else {
									limit++;
									if (limit == limit_for_win)
										win = true;
								}
								if (main_array[i][j][0][1] != Players[player])
									limit = 0;
								else {
									limit++;
									if (limit == limit_for_win)
										win = true;
								}
							}
							j++;
						}
						
						j = cursor_X - limit_for_win;
						limit = 0;
						for (i = cursor_Y - limit_for_win; i < cursor_Y + limit_for_win + 1; i++) {
							if (i < 0 || j < 0 || row <= i || col <= j) {
								limit = 0;
							}
							else {

								if (main_array[i][j][0][0] != Players[player])
									limit = 0;
								else {
									limit++;
									if (limit == limit_for_win)
										win = true;
								}
								if (main_array[i][j][1][1] != Players[player])
									limit = 0;
								else {
									limit++;
									if (limit == limit_for_win)
										win = true;
								}
							}
							j++;
						}


						if (win)
						{
							cout << endl << Players[player] << " NYERT!!";
						}
						mode = 0;
					}
					break;
				}
			}
			//mode 2 új lehelyezése->mode0
			if (mode == 2) {
				switch (_getch()) {
				case KEY_UP:
					cursor_Y++;
					if (cursor_Y > row) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_Y--;
						continue;
					}

					break;
				case KEY_DOWN:
					cursor_Y--;
					if (cursor_Y < -1) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_Y++;

						continue;
					}

					break;
				case KEY_LEFT:
					cursor_X--;
					if (cursor_X < -1) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_X++;

						continue;
					}


					break;
				case KEY_RIGHT:
					cursor_X++;
					if (cursor_X > col) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_X--;
						continue;
					}
					break;
				case KEY_ENTER:
					/*bővítés*/
					if (cursor_Y < 0) {
						row++;
						main_array = cloneArrayValues(row, col, 1, 0, main_array);
						cursor_Y = 0;
					}
					if (cursor_Y >= row) {
						row++;
						main_array = cloneArrayValues(row, col, -1, 0, main_array);

					}
					if (cursor_X < 0) {
						col++;
						main_array = cloneArrayValues(row, col, 0, 1, main_array);
						cursor_X = 0;
					}
					if (cursor_X >= col) {
						col++;
						main_array = cloneArrayValues(row, col, 0, -1, main_array);
					}
					bool err = false;
					/* Megnézzük hogy van e már valami ott ahova új lapot akar lerakni */
					if (cursor_Y >= 0 && cursor_Y < row && cursor_X >= 0 && cursor_X < col) {
						if (main_array[cursor_Y][cursor_X][0][0] != '-') {
							err = true;
						}

					}
					/* Megnézzük hogy van e már oldalszomszédja */
					bool oldalszomszed = false;
					if (cursor_Y - 1 >= 0) {
						if (main_array[cursor_Y - 1][cursor_X][0][0] != '-') {
							oldalszomszed = true;

						}
					}
					if (cursor_Y + 1 < row) {
						if (main_array[cursor_Y + 1][cursor_X][0][0] != '-') {
							oldalszomszed = true;

						}
					}
					if (cursor_X - 1 >= 0) {
						if (main_array[cursor_Y][cursor_X - 1][0][0] != '-') {
							oldalszomszed = true;

						}
					}
					if (cursor_X + 1 < col) {
						if (main_array[cursor_Y][cursor_X + 1][0][0] != '-') {
							oldalszomszed = true;
						}
					}

					if (err) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
					}
					else if (!oldalszomszed) {
						cout << endl << "Nincs oldalszomszed" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
					}
					else {
						for (int i = 0; i < 2; i++)
						{
							for (int j = 0; j < 2; j++)
							{
								main_array[cursor_Y][cursor_X][i][j] = '.';
							}
						}
						mode = 0;

						break;
					}
				}
			}
			//mode 4 tile áthelyezése hova ->mode0
			if (mode == 4) {
				switch (_getch()) {
				case KEY_UP:
					cursor_Y++;
					if (cursor_Y > row) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_Y--;
						continue;
					}

					break;
				case KEY_DOWN:
					cursor_Y--;
					if (cursor_Y < -1) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_Y++;

						continue;
					}

					break;
				case KEY_LEFT:
					cursor_X--;
					if (cursor_X < -1) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_X++;

						continue;
					}


					break;
				case KEY_RIGHT:
					cursor_X++;
					if (cursor_X > col) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_X--;
						continue;
					}
					break;
				case KEY_ENTER:
					/*bővítés*/
					if (cursor_Y < 0) {
						row++;
						main_array = cloneArrayValues(row, col, 1, 0, main_array);
						cursor_Y = 0;
					}
					if (cursor_Y >= row) {
						row++;
						main_array = cloneArrayValues(row, col, -1, 0, main_array);

					}
					if (cursor_X < 0) {
						col++;
						main_array = cloneArrayValues(row, col, 0, 1, main_array);
						cursor_X = 0;
					}
					if (cursor_X >= col) {
						col++;
						main_array = cloneArrayValues(row, col, 0, -1, main_array);
					}
					bool err = false;
					/* Megnézzük hogy van e már valami ott ahova új lapot akar lerakni */
					if (cursor_Y >= 0 && cursor_Y < row && cursor_X >= 0 && cursor_X < col) {
						if (main_array[cursor_Y][cursor_X][0][0] != '-') {
							err = true;
						}

					}
					/* Megnézzük hogy van e már oldalszomszédja */
					bool oldalszomszed = false;
					if (cursor_Y - 1 >= 0) {
						if (main_array[cursor_Y - 1][cursor_X][0][0] != '-') {
							oldalszomszed = true;

						}
					}
					if (cursor_Y + 1 < row) {
						if (main_array[cursor_Y + 1][cursor_X][0][0] != '-') {
							oldalszomszed = true;

						}
					}
					if (cursor_X - 1 >= 0) {
						if (main_array[cursor_Y][cursor_X - 1][0][0] != '-') {
							oldalszomszed = true;

						}
					}
					if (cursor_X + 1 < col) {
						if (main_array[cursor_Y][cursor_X + 1][0][0] != '-') {
							oldalszomszed = true;
						}
					}

					if (err) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
					}
					else if (!oldalszomszed) {
						cout << endl << "Nincs oldalszomszed" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
					}
					else {

						for (int k = 0; k < 2; k++)
						{
							for (int l = 0; l < 2; l++)
							{
								main_array[cursor_Y][cursor_X][k][l] = mozgatando[k][l];

							}
						}
						//Ellenörzés ##########################################################
						/*Ellenörzés a sorban*/
						limit = 0;
						/*sor*/
						i = cursor_Y;
						/*subsor*/
						k = cursor_y;
						/*oszlop*/
						for (j = cursor_X - limit_for_win; j < cursor_X + limit_for_win + 1; j++) {
							/*suboszlop*/
							for (l = 0; l < 2; l++)
							{
								if (i < 0 || j < 0 || row <= i || col <= j) {
									/*érvénytelen lapkák*/
								}
								else {
									if (main_array[i][j][k][l] == Players[player])
									{
										limit++;
										if (limit == limit_for_win)
											win = true;
									}
									else {
										limit = 0;
									}

								}
							}
						}
						/*Ellenörzés oszlopban */
						limit = 0;
						/*oszlop*/
						j = cursor_X;
						/*suboszlop*/
						l = cursor_x;
						/*sor*/
						for (i = cursor_Y - limit_for_win; i < cursor_Y + limit_for_win + 1; i++) {
							/*subsor*/
							for (k = 0; k < 2; k++)
							{
								if (i < 0 || j < 0 || row <= i || col <= j) {
									/*érvénytelen lapkák*/
								}
								else {
									if (main_array[i][j][k][l] == Players[player])
									{
										limit++;
										if (limit == limit_for_win)
											win = true;
									}
									else {
										limit = 0;
									}

								}
							}
						}
						/* Ellenörzés átlóban */
						j = cursor_X - limit_for_win;
						limit = 0;
						for (i = cursor_Y + limit_for_win; i > cursor_Y - limit_for_win - 1; i--) {
							if (i < 0 || j < 0 || row <= i || col <= j) {
								limit = 0;
							}
							else {
								if (main_array[i][j][1][0] != Players[player])
									limit = 0;
								else {
									limit++;
									if (limit == limit_for_win)
										win = true;
								}
								if (main_array[i][j][0][1] != Players[player])
									limit = 0;
								else {
									limit++;
									if (limit == limit_for_win)
										win = true;
								}
							}
							j++;
						}

						j = cursor_X - limit_for_win;
						limit = 0;
						for (i = cursor_Y - limit_for_win; i < cursor_Y + limit_for_win + 1; i++) {
							if (i < 0 || j < 0 || row <= i || col <= j) {
								limit = 0;
							}
							else {

								if (main_array[i][j][0][0] != Players[player])
									limit = 0;
								else {
									limit++;
									if (limit == limit_for_win)
										win = true;
								}
								if (main_array[i][j][1][1] != Players[player])
									limit = 0;
								else {
									limit++;
									if (limit == limit_for_win)
										win = true;
								}
							}
							j++;
						}


						if (win)
						{
							cout << endl << Players[player] << " NYERT!!";
						}
						mode = 0;
						break;
					}
				}

			}
			//mode 3 tile áthelyezése honnan->mode4
			if (mode == 3) {
				switch (_getch()) {
				case KEY_UP:
					cursor_Y++;
					if (cursor_Y > row - 1) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_Y--;
						continue;
					}
					break;
				case KEY_DOWN:
					cursor_Y--;
					if (cursor_Y < 0) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_Y++;

						continue;
					}
					break;
				case KEY_LEFT:
					cursor_X--;
					if (cursor_X < 0) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_X++;

						continue;
					}
					break;
				case KEY_RIGHT:
					cursor_X++;
					if (cursor_X > col - 1) {
						cout << endl << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						cursor_X--;
						continue;
					}
					break;
				case KEY_ENTER:
					oldalszomszed_szam = 0;
					/*Ellenörizzük hogy van e 4 szomszédos lapka*/

					if (cursor_Y - 1 >= 0) {
						if (main_array[cursor_Y - 1][cursor_X][0][0] != '-') {
							oldalszomszed_szam++;

						}
					}
					if (cursor_Y + 1 < row) {
						if (main_array[cursor_Y + 1][cursor_X][0][0] != '-') {
							oldalszomszed_szam++;

						}
					}
					if (cursor_X - 1 >= 0) {
						if (main_array[cursor_Y][cursor_X - 1][0][0] != '-') {
							oldalszomszed_szam++;

						}
					}
					if (cursor_X + 1 < col) {
						if (main_array[cursor_Y][cursor_X + 1][0][0] != '-') {
							oldalszomszed_szam++;
						}
					}

					/* Ellenőrizzük hogy van e pályaszakadás ha kivesszük */
					int oldalszomszed_szam_V;
					bool palyaszakadas = false;
					/* Tömb debugoláshoz illetve vizuális pályaszakadás keresésre */
					int** arr = new int* [row];
					for (int i = 0; i < row; i++)
					{
						arr[i] = new int[col];
						for (int j = 0; j < col; j++)
						{
							arr[i][j] = 0;
						}
					}
					for (i = row - 1; i > -1; i--) {
						for (int j = 0; j < col; j++)
						{
							// megnézzük hogy a vizsgált elemnek van e szomszédja 
							oldalszomszed_szam_V = 0;
							// ha amit vizsgálok ne legyen 'üres'
							if (main_array[i][j][0][0] != '-' && (i != cursor_Y || j != cursor_X)) {

								// Amit vizsgálok oldalszomszéd ne legyen üres, ha az akkor nincs oldalszomszéd,

								// illetve ha az amit ki akarok venni
								if (i - 1 >= 0) {
									if (main_array[i - 1][j][0][0] != '-' && (i - 1 != cursor_X || j != cursor_Y)) {
										oldalszomszed_szam_V++;
									}
								}
								if (i + 1 < row) {
									if (main_array[i + 1][j][0][0] != '-' && (i + 1 != cursor_X || j != cursor_Y)) {
										oldalszomszed_szam_V++;
									}
								}
								if (j - 1 >= 0) {
									if (main_array[i][j - 1][0][0] != '-' && (i != cursor_X || j - 1 != cursor_Y)) {
										oldalszomszed_szam_V++;
									}
								}
								if (j + 1 < col) {
									if (main_array[i][j + 1][0][0] != '-' && (i != cursor_X || j + 1 != cursor_Y)) {
										oldalszomszed_szam_V++;
									}
								}
								if (oldalszomszed_szam_V < 1 && jatekoslapka>2) {
									palyaszakadas = true;
								}

							}
							if (oldalszomszed_szam_V < 1) {
								cout << 0;
								arr[i][j] = 0;
							}
							else {
								cout << 1;
								arr[i][j] = 1;
							}
						}
						cout << endl;
					}

					int legnagyobb;
					int incremental = 2;

					for (i = row - 1; i > -1; i--) {
						for (int j = col - 1; j > -1; j--)
						{

							/* Amit vizsgálok ne legyen 'üres' */
							if (arr[i][j] != 0) {
								legnagyobb = 0;
								if (i - 1 >= 0) {
									if (arr[i - 1][j] > legnagyobb) {
										legnagyobb = arr[i - 1][j];
									}
								}
								if (i + 1 < row) {
									if (arr[i + 1][j] > legnagyobb) {
										legnagyobb = arr[i + 1][j];
									}
								}
								if (j - 1 >= 0) {
									if (arr[i][j - 1] > legnagyobb) {
										legnagyobb = arr[i][j - 1];
									}
								}
								if (j + 1 < col) {
									if (arr[i][j + 1] > legnagyobb) {
										legnagyobb = arr[i][j + 1];
									}
								}
								/* Van nagyobb szomszéd? */
								if (legnagyobb > arr[i][j]) {
									arr[i][j] = legnagyobb;
								}
								else if (legnagyobb == arr[i][j])
								{
									if (incremental - 2 == 0) {
										arr[i][j] = incremental;
										incremental++;
									}
								}
								else {
									arr[i][j] = incremental;
									incremental++;
								}
							}
						}

						for (int j = 0; j < col; j++)
						{

							/* Amit vizsgálok ne legyen 'üres' */
							if (arr[i][j] != 0) {
								legnagyobb = arr[i][j];
								if (i - 1 >= 0) {
									if (arr[i - 1][j] > legnagyobb) {
										legnagyobb = arr[i - 1][j];
									}
								}
								if (i + 1 < row) {
									if (arr[i + 1][j] > legnagyobb) {
										legnagyobb = arr[i + 1][j];
									}
								}
								if (j - 1 >= 0) {
									if (arr[i][j - 1] > legnagyobb) {
										legnagyobb = arr[i][j - 1];
									}
								}
								if (j + 1 < col) {
									if (arr[i][j + 1] > legnagyobb) {
										legnagyobb = arr[i][j + 1];
									}
								}
								if (legnagyobb > arr[i][j]) {
									arr[i][j] = legnagyobb;
								}
								else if (legnagyobb == arr[i][j])
								{

								}
								else {
									arr[i][j] = incremental;
									incremental++;
								}
							}
							cout << arr[i][j];
						}

						cout << endl;
					}
					/* Ellenörzés hogy minden elem ugyan az e, ha nem akkor pályaszakadás van*/

					for (i = row - 1; i > -1; i--) {
						for (int j = col - 1; j > -1; j--)
						{
							/* Amit vizsgálok ne legyen 'üres' */
							if (arr[i][j] != 0) {
								if (arr[i][j] != incremental - 1 && jatekoslapka>2)
									palyaszakadas = true;
							}
						}
					}

					if (oldalszomszed_szam == 4) {
						cout << "Ervenytelen korbe van zarva" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						continue;
					}
					else if (palyaszakadas) {
						cout << "Palyaszaladas" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						continue;

					}
					else if (main_array[cursor_Y][cursor_X][cursor_y][cursor_x] == '-') {
						cout << "Ervenytelen" << endl << "Folytatashoz uss le egy billentyut..." << endl;
						cin.ignore();
						continue;
					}

					else {
						mozgatas_elotti_X = cursor_X;
						mozgatas_elotti_Y = cursor_Y;

						for (int k = 0; k < 2; k++)
						{
							mozgatando[k] = new char[2];
							for (int l = 0; l < 2; l++)
							{
								mozgatando[k][l] = main_array[cursor_Y][cursor_X][k][l];
								main_array[cursor_Y][cursor_X][k][l] = '-';
							}

						}

						mode = 4;
					}
					break;
				}
			}

		}
	}
	
	/*felszabadítás*/

	return 0;

}
